------------------------------------------------// Открытие базы данных \\------------------------------------------------
Стандартная библиотека предоставляет пакет database/sql для работы с базами данных

Drivers()
Эта функция возвращает срез строк, каждая из которых содержит имя драйвера базы данных.

Open(driver, connectionStr)
Эта функция открывает базу данных, используя указанный драйвер и строку подключения. 
Результатом является указатель на структуру DB, которая используется для взаимодействия с базой данных, 
и error, указывающая на проблемы с открытием базы данных.

------------------------------------------------// Выполнение операторов и запросов \\------------------------------------------------
Query(query, ...args)
Этот метод выполняет указанный запрос, используя необязательные аргументы- заполнители. 
Результаты представляют собой структуру Rows, содержащую результаты запроса, и error, 
указывающую на проблемы с выполнением запроса.

QueryRow(query, ...args)
Этот метод выполняет указанный запрос, используя необязательные аргументы- заполнители. 
Результатом является структура Row, представляющая первую строку результатов запроса

Exec(query, ...args)
Этот метод выполняет операторы или запросы, которые не возвращают строки данных. 
Метод возвращает Result, описывающий ответ от базы данных, и error, сигнализирующую о проблемах с выполнением

------------------------------------------------// Запрос нескольких строк \\------------------------------------------------
Метод Query выполняет запрос, извлекающий одну или несколько строк из базы данных. 
Метод Query возвращает структуру Rows, которая содержит результаты запроса и error, указывающую на проблемы

Next()
Этот метод переходит к следующей строке результата. Результатом является логическое значение, 
которое принимает значение true, когда есть данные для чтения, и значение false, 
когда достигнут конец данных, после чего автоматически вызывается метод Close.

NextResultSet() Этот метод переходит к следующему набору результатов, когда в одном и том же ответе базы данных имеется несколько наборов результатов. 
Метод возвращает true, если есть другой набор строк для обработки.

Scan(...targets)
Этот метод присваивает значения SQL из текущей строки указанным переменным. Значения назначаются с помощью указателей, и метод возвращает error, 
указывающую, что значения не могут быть просканированы

Close()
Этот метод предотвращает дальнейшее перечисление результатов и используется, когда требуются не все данные. 
Нет необходимости вызывать этот метод, если для перехода используется метод Next, пока он не вернет значение false.

------------------------------------------------// Понимание того, как можно сканировать значения SQL \\------------------------------------------------

Наиболее распространенная проблема с методом Scan — это несоответствие между типом данных SQL и переменной Go, 
в которую он сканируется. Метод Scan предлагает некоторую гибкость при сопоставлении значений SQL со значениями Go. 
Вот краткое изложение наиболее важных правил:

SQL cтроки, числовые и логические значения могут быть сопоставлены с их аналогами в Go, 
хотя следует соблюдать осторожность с числовыми типами, чтобы предотвратить переполнение.

Числовые и логические типы SQL можно сканировать в строки Go.

Строки SQL могут быть просканированы в числовые типы Go, но только если строка может быть проанализирована 
с использованием обычных функций Go (описанных в главе 5) и только если нет переполнения.

Значения времени SQL можно сканировать в строки Go или значения *time.Time.

Любое значение SQL можно преобразовать в указатель на пустой интерфейс (*interface{}), 
что позволяет преобразовать значение в другой тип.

------------------------------------------------// Выполнение других запросов \\------------------------------------------------
RowsAffected()
Этот метод возвращает количество строк, затронутых инструкцией, выраженное как int64. 
Этот метод также возвращает error, которая используется, когда есть проблемы с анализом ответа или когда 
база данных не поддерживает эту функцию.

LastInsertId()
Этот метод возвращает значение int64, представляющее значение, сгенерированное базой данных при выполнении инструкции,
 которая обычно является автоматически сгенерированным ключом. Этот метод также возвращает error, 
 которая используется, когда значение, возвращаемое базой данных, не может быть преобразовано в Go int

------------------------------------------------// Использование подготовленных операторов \\------------------------------------------------
Prepare(query)
Этот метод создает подготовленный оператор для указанного запроса. Результатом является структура Stmt и error, 
указывающая на проблемы с подготовкой инструкции

Query(...vals)
Этот метод выполняет подготовленный оператор с необязательными значениями заполнителей. 
Результатом являются структура Rows и error. Этот метод эквивалентен методу DB.Query.

QueryRow(...vals)
Этот метод выполняет подготовленный оператор с необязательными значениями заполнителей. 
Результатом являются структура Row и error. Этот метод эквивалентен методу DB.QueryRow.

Exec(...vals)
Этот метод выполняет подготовленный оператор с необязательными значениями заполнителей. 
Результатами являются Result и error. Этот метод эквивалентен методу DB.Exec.

Close()
Этот метод закрывает оператор. Операторы не могут быть выполнены после их закрытия.

------------------------------------------------// Использование транзакций \\------------------------------------------------
Begin()
Этот метод запускает новую транзакцию. Результатом является указатель на значение Tx и error, 
указывающая на проблемы с созданием транзакции.

Query(query, ...args)
Этот метод эквивалентен методу DB.Query, но запрос выполняется в рамках транзакции.

QueryRow(query, ...args)
Этот метод эквивалентен методу DB.QueryRow, но запрос выполняется в рамках транзакции

Exec(query, ...args)
Этот метод эквивалентен методу DB.Exec, но query/statement выполняется в рамках транзакции.

Prepare(query)
Этот метод эквивалентен методу DB.Query, но созданный им подготовленный оператор выполняется в рамках транзакции.

Stmt(statement)
Этот метод принимает подготовленный оператор, созданный за пределами области транзакции, и возвращает тот, 
который выполняется в рамках транзакции

Commit()
Этот метод фиксирует ожидающие изменения в базе данных, возвращая error, указывающую на проблемы с применением изменений.

Rollback()
Этот метод прерывает транзакции, так что ожидающие изменения отбрасываются. 
Этот метод возвращает error, указывающую на проблемы с прерыванием транзакции.

------------------------------------------------// Использование рефлексии для сканирования данных в структуру \\------------------------------------------------
Рефлексия — это функция, которая позволяет проверять и использовать типы и значения во время выполнения. 
Рефлексия — это продвинутая и сложная функция

Columns()
Этот метод возвращает фрагмент строк, содержащих имена столбцов результатов и error, которая используется при закрытии результатов.

ColumnTypes()
Этот метод возвращает срез *ColumnType, который описывает типы данных результирующих столбцов. 
Этот метод также возвращает error, которая используется, когда результаты закрыты.

Name()
Этот метод возвращает имя столбца, указанное в результатах, выраженное в виде строки.

DatabaseTypeName()
Этот метод возвращает имя типа столбца в базе данных, выраженное в виде строки..

Nullable()
Этот метод возвращает два bool результата. Первый результат true, если тип базы данных может быть null. 
Второй результат true, если драйвер поддерживает нулевые значения.

DecimalSize()
Этот метод возвращает сведения о размере десятичных значений. Результатом является int64, указывающий точность, 
int64, указывающий масштаб, и bool, который имеет значение true для десятичных типов и false для других типов.

Length()
Этот метод возвращает длину для типов баз данных, которые могут иметь переменную длину. 
Результатом является int64, указывающий длину, и bool значение, которое имеет значение true для типов, 
определяющих длину, и значение false для других типов.

ScanType()
Этот метод возвращает reflect.Type, указывающий тип Go, который будет использоваться при сканировании 
этого столбца с помощью метода Rows.Scan