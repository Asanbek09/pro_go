------------------------------------------------// Чтение и запись данных JSON \\------------------------------------------------
Пакет encoding/json обеспечивает поддержку кодирования и декодирования данных JSON

NewEncoder(writer)
Эта функция возвращает Encoder, который можно использовать для кодирования данных JSON и записи их в указанный Writer

NewDecoder(reader)
Эта функция возвращает Decoder, который можно использовать для чтения данных JSON из указанного Reader и их декодирования.

Marshal(value)
Эта функция кодирует указанное значение как JSON. Результатом является содержимое JSON, выраженное в виде среза байта, и error, 
указывающая на наличие проблем с кодировкой

Unmarshal(byteSlice, val)
Эта функция анализирует данные JSON, содержащиеся в указанном срезе байтов, и присваивает результат указанному значению

------------------------------------------------// Кодирование данных JSON \\------------------------------------------------
Функция-конструктор NewEncoder используется для создания Encoder, который можно использовать для записи данных JSON в Writer

Encode(val)
Этот метод кодирует указанное значение как JSON и записывает его в Writer

SetEscapeHTML(on)
Этот метод принимает bool аргумент, который, если он равен true, кодирует символы, экранирование которых в HTML было бы опасным. 
По умолчанию эти символы экранируются

SetIndent(prefix, indent)
Этот метод задает префикс и отступ, которые применяются к имени каждого поля в выходных данных JSON

Основные типы данных Go представлены в JSON

bool
Значения Go bool выражаются как JSON true или false.

string
Строковые значения Go выражаются в виде строк JSON. По умолчанию небезопасные символы HTML экранируются

float32, float64
Значения Go с плавающей запятой выражаются в виде чисел JSON.

int, int<size>
Целочисленные значения Go выражаются в виде чисел JSON

uint, uint<size>
Целочисленные значения Go выражаются в виде чисел JSON

byte
Байты Go выражаются в виде чисел JSON

rune
Руны Go выражаются в виде чисел JSON

nil
Значение Go nil выражается как null значение JSON

Pointers
Кодер JSON следует указателям и кодирует значение в месте расположения указателя

------------------------------------------------// Создание полностью настраиваемых кодировок JSON \\------------------------------------------------
MarshalJSON()
Этот метод вызывается для создания JSON-представления значения и возвращает байтовый срез, содержащий JSON и error, 
указывающую на проблемы с кодировкой

------------------------------------------------// Декодирование данных JSON \\------------------------------------------------
Decode(value)
Этот метод считывает и декодирует данные, которые используются для создания указанного значения. 
Метод возвращает error, указывающую на проблемы с декодированием данных до требуемого типа или EOF.

DisallowUnknownFields()
По умолчанию при декодировании типа структуры Decoder игнорирует любой ключ в данных JSON, 
для которого нет соответствующего поля структуры. Вызов этого метода приводит к тому, что Decode возвращает ошибку, 
а не игнорирует ключ

UseNumber()
По умолчанию числовые значения JSON декодируются в значения float64. При вызове этого метода вместо этого используется тип Number, 
как описано в разделе «Расшифровка числовых значений»

------------------------------------------------// Расшифровка числовых значений \\------------------------------------------------
Int64()
Этот метод возвращает декодированное значение как int64 и error, которая указывает, что значение не может быть преобразовано

Float64()
Этот метод возвращает декодированное значение в виде float64 и error, которая указывает, что значение не может быть преобразовано

String()
Этот метод возвращает непреобразованную строку из данных JSON.

------------------------------------------------// Указание типов для декодирования \\------------------------------------------------
Это позволяет Decoder выбрать тип данных Go для декодируемого значения JSON. Если вы знаете структуру данных JSON, 
которые вы декодируете, вы можете указать Decoder использовать определенные типы Go, 
используя переменные этого типа для получения декодированного значения

------------------------------------------------// Создание полностью настраиваемых декодеров JSON \\------------------------------------------------
UnmarshalJSON(byteSlice)
Этот метод вызывается для декодирования данных JSON, содержащихся в указанном байтовом срезе. Результатом является error, указывающая на
проблемы с кодировкой