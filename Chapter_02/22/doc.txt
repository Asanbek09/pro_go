------------------------------------------------// Чтение файлов \\------------------------------------------------
Ключевым пакетом при работе с файлами является пакет os. Этот пакет обеспечивает доступ к функциям операционной системы, 
включая файловую систему, таким образом, что скрывает большую часть деталей реализации, а это означает, 
что одни и те же функции могут использоваться для достижения одинаковых результатов независимо от используемой операционной системы

ReadFile(name)
Эта функция открывает указанный файл и читает его содержимое. Результатом является байтовый срез, содержащий контент файла, и error,
указывающая на проблемы с открытием или чтением файла

Open(name)
Эта функция открывает указанный файл для чтения. Результатом является структура File и error, указывающая на проблемы с открытием файла

------------------------------------------------// Чтение из определенного места \\------------------------------------------------
ReadAt(slice, offset)
Этот метод определяется интерфейсом ReaderAt и выполняет чтение в конкретный срез в указанном смещении позиции в файле

Seek(offset, how)
Этот метод определяется интерфейсом Seeker и перемещает смещение в файл для следующего чтения. 
Смещение определяется комбинацией двух аргументов: первый аргумент указывает количество байтов для смещения, 
а второй аргумент определяет, как применяется смещение — значение 0 означает, что смещение относительно начала файла, 
значение 1 означает, что смещение относительно текущей позиции чтения, а значение 2 означает, что смещение относительно конца файла

------------------------------------------------// Запись в файлы \\------------------------------------------------

Пакет os также включает функции для записи файлов. 
Эти функции более сложны в использовании, чем их аналоги, связанные с чтением, 
поскольку требуется больше параметров конфигурации

WriteFile(name, slice, modePerms)
Эта функция создает файл с указанным именем, режимом и разрешениями и записывает содержимое указанного среза байтов. 
Если файл уже существует, его содержимое будет заменено байтовым срезом. Результатом является ошибка, 
сообщающая о любых проблемах с созданием файла или записью данных

OpenFile(name, flag, modePerms)
Функция открывает файл с указанным именем, используя флаги для управления открытием файла. 
Если создается новый файл, применяются указанный режим и разрешения. Результатом является значение File, 
обеспечивающее доступ к содержимому файла, и ошибка, указывающая на проблемы с открытием файла

------------------------------------------------// Использование функции удобства записи \\------------------------------------------------

Функция WriteFile предоставляет удобный способ записи всего файла за один шаг и создаст файл, если он не существует

------------------------------------------------// Использование файловой структуры для записи в файл \\------------------------------------------------
Функция OpenFile открывает файл и возвращает значение File. 
В отличие от функции Open, функция OpenFile принимает один или несколько флагов, указывающих, как следует открывать файл. 
Флаги определены как константы в пакете os

O_RDONLY
Этот флаг открывает файл только для чтения, чтобы его можно было читать, но не записывать.

O_WRONLY
Этот флаг открывает файл только для записи, чтобы в него можно было писать, но нельзя было читать.

O_RDWR
Этот флаг открывает файл для чтения и записи, чтобы в него можно было записывать и читать.

O_APPEND
Этот флаг будет добавлять записи в конец файла.

O_CREATE
Этот флаг создаст файл, если он не существует.

O_EXCL
Этот флаг используется в сочетании с O_CREATE для обеспечения создания нового файла. 
Если файл уже существует, этот флаг вызовет ошибку.

O_SYNC
Этот флаг включает синхронную запись, так что данные записываются на устройство хранения до возврата из функции/метода записи.

O_TRUNC
Этот флаг усекает существующее содержимое в файле.

Структура File определяет методы
Seek(offset, how)
Этот метод устанавливает местоположение для последующих операций

Write(slice)
Этот метод записывает содержимое указанного среза байтов в файл. Результатом является количество записанных байтов и ошибка, 
указывающая на проблемы с записью данных.

WriteAt(slice, offset)
Этот метод записывает данные среза в указанное место и является аналогом метода ReadAt

WriteString(str)
Этот метод записывает строку в файл. Это удобный метод, который преобразует строку в байтовый срез, 
вызывает метод Write и возвращает полученные результаты.

------------------------------------------------// Запись данных JSON в файл \\------------------------------------------------

Структура File реализует интерфейс Writer, который позволяет использовать файл с функциями форматирования и обработки строк, 
описанными в предыдущих главах. Это также означает, что функции JSON

------------------------------------------------// Использование удобных функций для создания новых файлов \\------------------------------------------------

Create(name)
Эта функция эквивалентна вызову OpenFile с флагами O_RDWR, O_CREATE и O_TRUNC. Результатом является File, 
который можно использовать для чтения и записи, и error, которая используется для обозначения проблем при создании файла. 
Обратите внимание, что эта комбинация флагов означает, что если файл с указанным именем существует, 
он будет открыт, а его содержимое будет удалено.

CreateTemp(dirName, fileName)
Эта функция создает новый файл в каталоге с указанным именем. Если имя представляет собой пустую строку, 
то используется системный временный каталог, полученный с помощью функции TempDir (описано в таблице 22-9). 
Файл создается с именем, которое содержит случайную последовательность символов, как показано в тексте после таблицы. 
Файл открывается с флагами O_RDWR, O_CREATE и O_EXCL. Файл не удаляется при закрытии

------------------------------------------------// Работа с путями к файлам \\------------------------------------------------
Getwd()
Эта функция возвращает текущий рабочий каталог, выраженный в виде строки, и error, указывающую на проблемы с получением значения.

UserHomeDir()
Эта функция возвращает домашний каталог пользователя и ошибку, указывающую на проблемы с получением пути.

UserCacheDir()
Эта функция возвращает каталог по умолчанию для пользовательских кэшированных данных и ошибку, 
указывающую на проблемы с получением пути

UserConfigDir()
Эта функция возвращает каталог по умолчанию для пользовательских данных конфигурации и ошибку, 
указывающую на проблемы с получением пути

TempDir()
Эта функция возвращает каталог по умолчанию для временных файлов и ошибку, указывающую на проблемы с получением пути

Получив путь, вы можете обращаться с ним как со строкой и просто добавлять к нему дополнительные сегменты или, 
во избежание ошибок, использовать функции, предоставляемые пакетом path/filepath для манипулирования путями

Abs(path)
Эта функция возвращает абсолютный путь, что полезно, если у вас есть относительный путь, например имя файла.

IsAbs(path)
Эта функция возвращает true, если указанный путь является абсолютным

Base(path)
Эта функция возвращает последний элемент пути

Clean(path)
Эта функция очищает строки пути, удаляя повторяющиеся разделители и относительные ссылки

Dir(path)
Эта функция возвращает все элементы пути, кроме последнего

EvalSymlinks(path)
Эта функция оценивает символическую ссылку и возвращает результирующий путь

Ext(path)
Эта функция возвращает расширение файла из указанного пути, который считается суффиксом после последней точки в строке пути

FromSlash(path)
Эта функция заменяет каждую косую черту символом разделителя файлов платформы

ToSlash(path)
Эта функция заменяет разделитель файлов платформы косой чертой

Join(...elements)
Эта функция объединяет несколько элементов, используя файловый разделитель платформы

Match(pattern, path)
Эта функция возвращает значение true, если путь соответствует указанному шаблону

Split(path)
Эта функция возвращает компоненты по обе стороны от конечного разделителя пути в указанном пути

SplitList(path)
Эта функция разбивает путь на компоненты, которые возвращаются в виде среза строки

VolumeName(path)
Эта функция возвращает компонент тома указанного пути или пустую строку, если путь не содержит тома

------------------------------------------------// Управление файлами и каталогами \\------------------------------------------------

Chdir(dir)
Эта функция изменяет текущий рабочий каталог на указанный каталог. 
Результатом является error, указывающая на проблемы с внесением изменений

Mkdir(name, modePerms)
Эта функция создает каталог с указанным именем и режимом/ разрешениями. 
Результатом является error, равная нулю, если каталог создан, или описывающая проблему, если она возникает.

MkdirAll(name, modePerms)
Эта функция выполняет ту же задачу, что и Mkdir, но создает любые родительские каталоги по указанному пути.

MkdirTemp(parentDir, name)
Эта функция похожа на CreateTemp, но создает каталог, а не файл. Случайная строка добавляется в конец указанного имени 
или вместо звездочки, и новый каталог создается в указанном родительском каталоге. 
Результатами являются имя каталога и error, указывающая на проблемы.

Remove(name)
Эта функция удаляет указанный файл или каталог. Результатом является error, которая описывает любые возникающие проблемы.

RemoveAll(name)
Эта функция удаляет указанный файл или каталог. Если имя указывает каталог, 
то все содержащиеся в нем дочерние элементы также удаляются. Результатом является error, 
которая описывает любые возникающие проблемы

Rename(old, new)
Эта функция переименовывает указанный файл или папку. Результатом является ошибка, которая описывает любые возникающие проблемы

Symlink(old, new)
Эта функция создает символическую ссылку на указанный файл. Результатом является ошибка, которая описывает любые возникающие проблемы

------------------------------------------------// Изучение файловой системы \\------------------------------------------------
ReadDir(name)
Эта функция читает указанный каталог и возвращает срез DirEntry, каждый из которых описывает элемент в каталоге.

Результатом функции ReadDir является срез значений, которые реализуют интерфейс DirEntry

Name()
Этот метод возвращает имя файла или каталога, описанного значением DirEntry

IsDir()
Этот метод возвращает значение true, если значение DirEntry представляет каталог

Type()
Этот метод возвращает значение FileMode, которое является псевдонимом uint32, 
который описывает файл больше и права доступа к файлу или каталогу, представленные значением DirEntry

Info()
Этот метод возвращает значение FileInfo, которое предоставляет дополнительные сведения о файле или каталоге, 
представленном значением DirEntry

Интерфейс FileInfo, являющийся результатом метода Info, используется для получения сведений о файле или каталоге. 
Наиболее полезные методы, определенные интерфейсом FileInfo

Name()
Этот метод возвращает строку, содержащую имя файла или каталога

Size()
Этот метод возвращает размер файла, выраженный в виде значения int64

Mode()
Этот метод возвращает режим файла и настройки разрешений для файла или каталога

ModTime()
Этот метод возвращает время последнего изменения файла или каталога

Stat(path)
Эта функция принимает строку пути. Он возвращает значение FileInfo, 
описывающее файл, и error, указывающую на проблемы с проверкой файла

------------------------------------------------// Изучение файловой системы \\------------------------------------------------
Пакет os определяет функцию с именем IsNotExist, принимает ошибку и возвращает true, если это означает, 
что ошибка указывает на то, что файл не существует

------------------------------------------------// Поиск файлов с помощью шаблона \\------------------------------------------------
Пакет path/filepath определяет функцию Glob, которая возвращает все имена в каталоге, соответствующие указанному шаблону

Match(pattern, name)
Эта функция сопоставляет один путь с шаблоном. Результатом является bool значение, указывающее на наличие совпадения, и error, 
указывающая на проблемы с шаблоном или с выполнением совпадения

Glob(pathPatten)
Эта функция находит все файлы, соответствующие указанному шаблону. Результатом является string срез, 
содержащий совпавшие пути и ошибку, указывающую на проблемы с выполнением поиска

------------------------------------------------// Обработка всех файлов в каталоге \\------------------------------------------------
WalkDir(directory, func)
Эта функция вызывает указанную функцию для каждого файла и каталога в указанном каталоге