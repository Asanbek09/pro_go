------------------------------------------------// Чтение файлов \\------------------------------------------------
Ключевым пакетом при работе с файлами является пакет os. Этот пакет обеспечивает доступ к функциям операционной системы, 
включая файловую систему, таким образом, что скрывает большую часть деталей реализации, а это означает, 
что одни и те же функции могут использоваться для достижения одинаковых результатов независимо от используемой операционной системы

ReadFile(name)
Эта функция открывает указанный файл и читает его содержимое. Результатом является байтовый срез, содержащий контент файла, и error,
указывающая на проблемы с открытием или чтением файла

Open(name)
Эта функция открывает указанный файл для чтения. Результатом является структура File и error, указывающая на проблемы с открытием файла

------------------------------------------------// Чтение из определенного места \\------------------------------------------------
ReadAt(slice, offset)
Этот метод определяется интерфейсом ReaderAt и выполняет чтение в конкретный срез в указанном смещении позиции в файле

Seek(offset, how)
Этот метод определяется интерфейсом Seeker и перемещает смещение в файл для следующего чтения. 
Смещение определяется комбинацией двух аргументов: первый аргумент указывает количество байтов для смещения, 
а второй аргумент определяет, как применяется смещение — значение 0 означает, что смещение относительно начала файла, 
значение 1 означает, что смещение относительно текущей позиции чтения, а значение 2 означает, что смещение относительно конца файла

------------------------------------------------// Запись в файлы \\------------------------------------------------

Пакет os также включает функции для записи файлов. 
Эти функции более сложны в использовании, чем их аналоги, связанные с чтением, 
поскольку требуется больше параметров конфигурации

WriteFile(name, slice, modePerms)
Эта функция создает файл с указанным именем, режимом и разрешениями и записывает содержимое указанного среза байтов. 
Если файл уже существует, его содержимое будет заменено байтовым срезом. Результатом является ошибка, 
сообщающая о любых проблемах с созданием файла или записью данных

OpenFile(name, flag, modePerms)
Функция открывает файл с указанным именем, используя флаги для управления открытием файла. 
Если создается новый файл, применяются указанный режим и разрешения. Результатом является значение File, 
обеспечивающее доступ к содержимому файла, и ошибка, указывающая на проблемы с открытием файла

------------------------------------------------// Использование функции удобства записи \\------------------------------------------------

Функция WriteFile предоставляет удобный способ записи всего файла за один шаг и создаст файл, если он не существует

------------------------------------------------// Использование файловой структуры для записи в файл \\------------------------------------------------
Функция OpenFile открывает файл и возвращает значение File. 
В отличие от функции Open, функция OpenFile принимает один или несколько флагов, указывающих, как следует открывать файл. 
Флаги определены как константы в пакете os

O_RDONLY
Этот флаг открывает файл только для чтения, чтобы его можно было читать, но не записывать.

O_WRONLY
Этот флаг открывает файл только для записи, чтобы в него можно было писать, но нельзя было читать.

O_RDWR
Этот флаг открывает файл для чтения и записи, чтобы в него можно было записывать и читать.

O_APPEND
Этот флаг будет добавлять записи в конец файла.

O_CREATE
Этот флаг создаст файл, если он не существует.

O_EXCL
Этот флаг используется в сочетании с O_CREATE для обеспечения создания нового файла. 
Если файл уже существует, этот флаг вызовет ошибку.

O_SYNC
Этот флаг включает синхронную запись, так что данные записываются на устройство хранения до возврата из функции/метода записи.

O_TRUNC
Этот флаг усекает существующее содержимое в файле.

Структура File определяет методы
Seek(offset, how)
Этот метод устанавливает местоположение для последующих операций

Write(slice)
Этот метод записывает содержимое указанного среза байтов в файл. Результатом является количество записанных байтов и ошибка, 
указывающая на проблемы с записью данных.

WriteAt(slice, offset)
Этот метод записывает данные среза в указанное место и является аналогом метода ReadAt

WriteString(str)
Этот метод записывает строку в файл. Это удобный метод, который преобразует строку в байтовый срез, 
вызывает метод Write и возвращает полученные результаты.

------------------------------------------------// Запись данных JSON в файл \\------------------------------------------------

Структура File реализует интерфейс Writer, который позволяет использовать файл с функциями форматирования и обработки строк, 
описанными в предыдущих главах. Это также означает, что функции JSON

------------------------------------------------// Использование удобных функций для создания новых файлов \\------------------------------------------------

Create(name)
Эта функция эквивалентна вызову OpenFile с флагами O_RDWR, O_CREATE и O_TRUNC. Результатом является File, 
который можно использовать для чтения и записи, и error, которая используется для обозначения проблем при создании файла. 
Обратите внимание, что эта комбинация флагов означает, что если файл с указанным именем существует, 
он будет открыт, а его содержимое будет удалено.

CreateTemp(dirName, fileName)
Эта функция создает новый файл в каталоге с указанным именем. Если имя представляет собой пустую строку, 
то используется системный временный каталог, полученный с помощью функции TempDir (описано в таблице 22-9). 
Файл создается с именем, которое содержит случайную последовательность символов, как показано в тексте после таблицы. 
Файл открывается с флагами O_RDWR, O_CREATE и O_EXCL. Файл не удаляется при закрытии