------------------------------------------------// Понимание средств чтения и записи \\------------------------------------------------
Интерфейсы Reader и Writer определяются пакетом io и предоставляют абстрактные способы чтения и записи данных без привязки к тому, 
откуда данные поступают или куда направляются

------------------------------------------------/ Понимание средств чтения \------------------------------------------------
Read(byteSlice)
Этот метод считывает данные в указанный []byte. Метод возвращает количество прочитанных байтов, выраженное как int, и error.

------------------------------------------------/ Понимание средств записи \------------------------------------------------
Write(byteSlice)
Этот метод записывает данные из указанного byte среза. Метод возвращает количество записанных байтов и error. 
Ошибка будет ненулевой, если количество записанных байтов меньше длины среза

------------------------------------------------/ Использование служебных функций для программ чтения и записи \------------------------------------------------
Copy(w, r)
Эта функция копирует данные из Reader в Writer до тех пор, пока не будет возвращен EOF или не будет обнаружена другая ошибка. 
Результатом является количество копий байтов и error, используемая для описания любых проблем.

CopyBuffer(w, r, buffer)
Эта функция выполняет ту же задачу, что и Copy, но считывает данные в  указанный буфер перед их передачей во Writer.

CopyN(w, r, count)
Эта функция копирует count байтов из Reader в Writer. Результатом является количество копий байтов и error, 
используемая для описания любых проблем.

ReadAll(r)
Эта функция считывает данные из указанного Reader до тех пор, пока не будет достигнут EOF. Результатом является байтовый срез, 
содержащий считанные данные и error, которая используется для описания любых проблем

ReadAtLeast(r, byteSlice, min)
Эта функция считывает как минимум указанное количество байтов из устройства чтения, помещая их в байтовый срез. 
Сообщается об ошибке, если считано меньше байтов, чем указано.

ReadFull(r, byteSlice)
Эта функция заполняет указанный байтовый срез данными. Результатом является количество прочитанных байтов и error. 
Будет сообщено об ошибке, если EOF будет обнаружен до того, как будет прочитано достаточно байтов для заполнения среза.

WriteString(w, str)
Эта функция записывает указанную строку в модуль записи.

------------------------------------------------/ Использование специализированных средств чтения и записи \------------------------------------------------
Pipe()
Эта функция возвращает PipeReader и PipeWriter, которые можно использовать для соединения функций, требующих Reader и Writer, 
как описано в разделе «Использование каналов».

MultiReader(...readers)
Эта функция определяет переменный параметр, который позволяет указать произвольное количество значений Reader. 
В результате получается Reader, которое передает содержимое каждого из своих параметров в той последовательности, 
в которой они определены, как описано в разделе «Объединение нескольких средств чтения»

MultiWriter(...writers)
Эта функция определяет переменный параметр, который позволяет указать произвольное количество значений Writer. 
Результатом является Writer, который отправляет одни и те же данные всем указанным модулям записи, 
как описано в разделе «Объединение нескольких средств записи»

LimitReader(r, limit)
Эта функция создает Reader, который будет завершать работу после указанного количества байтов, 
как описано в разделе «Ограничение чтения данных»

Close()
Этот метод закрывает средство чтения или записи. Детали зависят от реализации, но, как правило, 
любые последующие операции чтения из закрытого Reader будут возвращать нулевые байты и ошибку EOF, 
в то время как любые последующие записи в закрытый Writer будут возвращать ошибку.

------------------------------------------------/ Объединение нескольких средств чтения \------------------------------------------------
Функция MultiReader концентрирует входные данные от нескольких считывателей, чтобы их можно было обрабатывать последовательно

------------------------------------------------/ Буферизация данных \------------------------------------------------
Пакет bufio обеспечивает поддержку добавления буферов для чтения и записи

NewReader(r)
Эта функция возвращает буферизованный Reader с размером буфера по умолчанию (который на момент написания составляет 4096 байт).

NewReaderSize(r, size)
Эта функция возвращает буферизованный Reader с указанным размером буфера.

------------------------------------------------/ Использование дополнительных методов буферизованного чтения \------------------------------------------------
Функции NewReader и NewReaderSize возвращают значения bufio.Reader, которые реализуют интерфейс io.Reader 
и могут использоваться в качестве вставных оболочек для других типов методов Reader, органично вводя буфер чтения

Buffered()
Этот метод возвращает int число, указывающее количество байтов, которые можно прочитать из буфера

Discard(count)
Этот метод отбрасывает указанное количество байтов

Peek(count)
Этот метод возвращает указанное количество байтов, не удаляя их из буфера, то есть они будут возвращены последующими вызовами метода Read

Reset(reader)
Этот метод отбрасывает данные в буфере и выполняет последующие чтения из указанного Reader

Size()
Этот метод возвращает размер буфера, выраженный int.

------------------------------------------------/ Выполнение буферизованной записи \------------------------------------------------
NewWriter(w)
Эта функция возвращает буферизованный Writer с размером буфера по умолчанию (который на момент записи составляет 4096 байт).

NewWriterSize(w, size)

Конкретный тип данных, возвращаемый этими функциями, — bufio.Writer, который определяет методы
Available()
Этот метод возвращает количество доступных байтов в буфере.

Buffered()
Этот метод возвращает количество байтов, записанных в буфер

Flush()
Этот метод записывает содержимое буфера в базовый Writer.

Reset(writer)
Этот метод отбрасывает данные в буфере и выполняет последующую запись в указанный Writer

Size()
Этот метод возвращает емкость буфера в байтах

------------------------------------------------// Форматирование и сканирование с помощью средств чтения и записи \\------------------------------------------------

