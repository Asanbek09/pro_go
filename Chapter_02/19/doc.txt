------------------------------------------------// Представление дат и времени \\------------------------------------------------
Now()
Эта функция создает Time, представляющий текущий момент времени

Date(y, m, d, h, min, sec, nsec, loc)
Эта функция создает объект Time, представляющий указанный момент времени, который выражается аргументами года, месяца, 
дня, часа, минуты, секунды, наносекунды и Location. (Тип Location описан в 
разделе «Синтаксический анализ значений времени из строк».)

Unix(sec, nsec)
Эта функция создает значение Time из числа секунд и наносекунд с 1 января 1970 года по Гринвичу, широко известного как время Unix.

------------------------------------------------/ Доступ к компонентам Time осуществляется с помощью методов \------------------------------------------------

Date()
Этот метод возвращает компоненты года, месяца и дня. Год и день выражаются как значения int, а месяц — как значение Month.

Clock()
Этот метод возвращает компоненты часа, минут и секунд Time.

Year()
Этот метод возвращает компонент года, выраженный как int.

YearDay()
Этот метод возвращает день года, выраженный как int от 1 до 366 (для учета високосных лет).

Month()
Этот метод возвращает компонент месяца, выраженный с использованием типа Month.

Day()
Этот метод возвращает день месяца, выраженный как int.

Weekday()
Этот метод возвращает день недели, выраженный как Weekday.

Hour()
Этот метод возвращает час дня, выраженный как int от 0 до 23

Minute()
Этот метод возвращает количество минут, прошедших до часа дня, выраженное как int от 0 до 59.

Second()
Этот метод возвращает количество наносекунд, прошедших до секунды минуты, выраженное как int от 0 до 999 999 999

------------------------------------------------/ Для описания компонентов значения Time определены два типа \------------------------------------------------

Month
Этот тип представляет месяц, а пакет time определяет постоянные значения для названий месяцев на английском языке: 
January, February и т. д. Тип Month определяет метод String, который использует эти имена при форматировании строк.

Weekday
Этот тип представляет день недели, а пакет time определяет постоянные значения для названий дней недели на 
английском языке: Sunday, Monday и т. д. Тип Weekday определяет метод String, который использует эти имена 
при форматировании строк.

------------------------------------------------/ Форматирование времени как строк \------------------------------------------------
Format(layout)
Этот метод возвращает отформатированную строку, созданную с использованием указанного макета.

ANSIC Mon Jan _2 15:04:05 2006
UnixDate Mon Jan _2 15:04:05 MST 2006
RubyDate Mon Jan 02 15:04:05 -0700 2006
RFC822 02 Jan 06 15:04 MST
RFC822Z 02 Jan 06 15:04 -0700
RFC850 Monday, 02-Jan-06 15:04:05 MST
RFC1123 Mon, 02 Jan 2006 15:04:05 MST
RFC1123Z Mon, 02 Jan 2006 15:04:05 -0700
RFC3339 2006-01-02T15:04:05Z07:00
RFC3339Nano 2006-01-02T15:04:05.999999999Z07:00
Kitchen 3:04PM
Stamp Jan _2 15:04:05
StampMilli Jan _2 15:04:05.000
StampMicro Jan _2 15:04:05.000000
StampNano Jan _2 15:04:05.000000000

------------------------------------------------/ Разбор значений времени из строк \------------------------------------------------
Parse(layout, str)
Эта функция анализирует строку, используя указанный макет, чтобы создать значение Time. 
Возвращается error, указывающая на проблемы с разбором строки.

ParseInLocation(layout, str, location)
Эта функция анализирует строку, используя указанный макет и Location, если в строку не включен часовой пояс. 
Возвращается error, указывающая на проблемы с разбором строки.

------------------------------------------------/ Указание разбора местоположения \------------------------------------------------
LoadLocation(name)
Эта функция возвращает *Location для указанного имени и error, указывающую на наличие проблем.

LoadLocationFromTZData(name, data)
Эта функция возвращает *Location из байтового среза, содержащего отформатированную базу данных часовых поясов

FixedZone(name, offset)
Эта функция возвращает *Location, который всегда использует указанное имя и смещение от UTC.

------------------------------------------------/ Управление значениями времени \------------------------------------------------
Add(duration)
Этот метод добавляет указанную Duration к Time и возвращает результат.

Sub(time)
Этот метод возвращает значение Duration, выражающее разницу между Time вызова метода и Time, указанным в качестве аргумента

AddDate(y, m, d)
Этот метод добавляет к Time указанное количество лет, месяцев и дней и возвращает результат

After(time)
Этот метод возвращает значение true, если Time, в которое был вызван метод, наступает после Time, указанного в качестве аргумента

Before(time)
Этот метод возвращает значение true, если время, в которое был вызван метод, предшествует Time, указанному в качестве аргумента

Equal(time)
Этот метод возвращает значение true, если Time, в которое был вызван метод, равно Time, указанному в качестве аргумента.

IsZero()
Этот метод возвращает значение true, если Time, в которое был вызван метод, представляет момент нулевого времени, 
то есть 1 января 1 года, 00:00:00 UTC

In(loc)
Этот метод возвращает значение Time, выраженное в указанном Location.

Location()
Этот метод возвращает Location, связанный с Time, что фактически позволяет выразить время в другом часовом поясе

Round(duration)
Этот метод округляет Time до ближайшего интервала, представленного значением Duration

Truncate(duration)
Этот метод округляет Time до ближайшего интервала, представленного значением Duration

------------------------------------------------/ Представление продолжительности \------------------------------------------------
Тип Duration является псевдонимом типа int64 и используется для представления определенного количества миллисекунд

Hour
Эта константа представляет 1 час

Minute
Эта константа представляет 1 минуту.

Second
Эта константа представляет 1 секунду

Millisecond
Эта константа представляет 1 миллисекунду.

Microsecond
Эта константа представляет 1 миллисекунду

Nanosecond
Эта константа представляет 1 наносекунду

Hours()
Этот метод возвращает float64, который представляет Duration в часах

Minutes()
Этот метод возвращает float64, который представляет Duration в минутах

Seconds()
Этот метод возвращает float64, который представляет Duration в секундах

Milliseconds()
Этот метод возвращает float64, который представляет Duration в миллисекундах

Microseconds()
Этот метод возвращает float64, который представляет Duration в микросекундах

Nanoseconds()
Этот метод возвращает float64, который представляет Duration в наносекундах

Round(duration)
Этот метод возвращает Duration, которая округляется до ближайшего кратного указанной Duration

Truncate(duration)
Этот метод возвращает Duration, которая округляется в меньшую сторону до ближайшего кратного указанной Duration

------------------------------------------------/ Создание продолжительности относительно времени \------------------------------------------------

Since(time)
Эта функция возвращает Duration, выражающую время, прошедшее с момента указанного значения Time

Until(time)
Эта функция возвращает Duration, выражающую время, прошедшее до указанного значения Time.


------------------------------------------------/ Использование функций времени для горутин и каналов \------------------------------------------------

Sleep(duration)
Эта функция приостанавливает текущую горутину по крайней мере на указанное время

AfterFunc(duration, func)
Эта функция выполняет указанную функцию в своей собственной горутине по истечении указанного времени. 
Результатом является *Timer, метод Stop которого можно использовать для отмены выполнения функции до истечения продолжительности

After(duration)
Эта функция возвращает канал, который блокируется на указанное время, а затем возвращает значение Time. 
Подробнее см. в разделе «Получение уведомлений по времени».

Tick(duration)
Эта функция возвращает канал, который периодически отправляет значение Time, где период указан как продолжительность

