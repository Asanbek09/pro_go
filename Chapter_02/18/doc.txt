Кто они такие?
Математические функции позволяют выполнять обычные вычисления. Случайные числа — это числа, сгенерированные в последовательности, 
которую трудно предсказать. Сортировка — это процесс размещения последовательности значений в заданном порядке.

Почему они полезны?
Это функции, которые используются на протяжении всей разработки

Как они используются?
Эти функции предоставляются в пакетах math, math/rand и sort

Есть ли подводные камни или ограничения?
Если не инициализировано начальным значением, числа, созданные пакетом math/rand, не являются случайными.

Есть ли альтернативы?
Вы можете реализовать оба набора функций с нуля, хотя эти пакеты предоставляются, так что это не требуется.

------------------------------------------------// Работа с числами \\------------------------------------------------
Abs(val)
Эта функция возвращает абсолютное значение значения float64, то есть расстояние от нуля без учета направления.

Ceil(val)
Эта функция возвращает наименьшее целое число, равное или превышающее указанное значение float64. 
Результатом также является значение float64, хотя оно представляет собой целое число.

Copysign(x, y)
Эта функция возвращает значение float64, которое является абсолютным значением x со знаком y.

Floor(val)
Эта функция возвращает наибольшее целое число, которое меньше или равно указанному значению float64. 
Результатом также является значение float64, хотя оно представляет собой целое число.

Max(x, y)
Эта функция возвращает самое большое из указанных значений float64

Min(x, y)
Эта функция возвращает наименьшее из указанных значений float64

Mod(x, y)
Эта функция возвращает остаток x/y

Pow(x, y)
Эта функция возвращает значение x, возведенное в степень y.

Round(val)
Эта функция округляет указанное значение до ближайшего целого числа, округляя половинные значения в большую сторону. 
Результатом является значение float64, хотя оно представляет собой целое число.

RoundToEven(val)
Эта функция округляет указанное значение до ближайшего целого числа, округляя половинные значения до ближайшего четного числа. 
Результатом является значение float64, хотя оно представляет собой целое число.

------------------------------------------------// Генерация случайных чисел \\------------------------------------------------
 Seed(s)
 Эта функция устанавливает начальное значение, используя указанное значение int64.

 Float32()
 Эта функция генерирует случайное значение float32 в диапазоне от 0 до 1.

 Float64()
 Эта функция генерирует случайное значение float64 в диапазоне от 0 до 1.

 Int()
 Эта функция генерирует случайное int значение.

Intn(max)
Эта функция генерирует случайное int число меньше указанного значения, как описано после таблицы.

UInt32()
Эта функция генерирует случайное значение uint32.

UInt64()
Эта функция генерирует случайное значение uint64.

Shuffle(count, func)
Эта функция используется для рандомизации порядка элементов, как описано после таблицы.

------------------------------------------------// Сортировка числовых и строковых срезов \\------------------------------------------------

Float64s(slice)
Эта функция сортирует срез значений float64. Элементы сортируются на месте

Float64sAreSorted(slice)
Эта функция возвращает значение true, если элементы в указанном срезе float64 упорядочены.

Ints(slice)
Эта функция сортирует срез значений int. Элементы сортируются на месте

IntsAreSorted(slice)
Эта функция возвращает значение true, если элементы в указанном int срезе упорядочены.

Strings(slice)
Эта функция сортирует срез string значений. Элементы сортируются на месте.

StringsAreSorted(slice) 
Эта функция возвращает значение true, если элементы в указанном срезе string упорядочены.

------------------------------------------------// Поиск отсортированных данных \\------------------------------------------------

SearchInts(slice, val)
Эта функция ищет в отсортированном срезе указанное значение int. Результатом является индекс указанного значения или, 
если значение не найдено, индекс, по которому значение может быть вставлено при сохранении порядка сортировки.

SearchFloat64s(slice, val)
Эта функция ищет в отсортированном срезе указанное значение float64. Результатом является индекс указанного значения или, 
если значение не найдено, индекс, по которому значение может быть вставлено при сохранении порядка сортировки.

SearchStrings(slice, val)
Эта функция ищет в отсортированном срезе указанное string значение. Результатом является индекс указанного значения или, 
если значение не найдено, индекс, по которому значение может быть вставлено при сохранении порядка сортировки

Search(count, testFunc)
Эта функция вызывает тестовую функцию для указанного количества элементов. Результатом является индекс, для которого функция возвращает значение true. 
Если совпадений нет, результатом является индекс, в который можно вставить указанное значение для сохранения порядка сортировки.

------------------------------------------------// Сортировка пользовательских типов данных \\------------------------------------------------
Len()
Этот метод возвращает количество элементов, которые будут отсортированы.

Less(i, j)
Этот метод возвращает значение true, если элемент с индексом i должен появиться в отсортированной последовательности перед элементом j. 
Если Less(i,j) и Less(j, i) оба false, то элементы считаются равными.

Swap(i, j)
Этот метод меняет местами элементы по указанным индексам.

Sort(data)
Эта функция использует методы, описанные в таблице 18-8, для сортировки указанных данных.

Stable(data)
Эта функция использует методы, описанные в таблице 18-8, для сортировки указанных данных 
без изменения порядка элементов с одинаковым значением.

IsSorted(data)
Эта функция возвращает значение true, если данные отсортированы

Reverse(data)
Эта функция меняет порядок данных.