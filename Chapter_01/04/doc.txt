------------------------------------------------------// Что такое типы данных ? \\------------------------------------------------------------------
Кто они такие?
Типы данных используются для хранения основных значений, общих для всех программ, включая числа, 
строки и значения true/false. Эти типы данных можно использовать для определения постоянных и переменных значений.
 Указатели — это особый тип данных, в котором хранится адрес памяти.

Почему они полезны?
Базовые типы данных полезны сами по себе для хранения значений, но они также являются основой,
 на которой могут быть определены более сложные типы данных, как я объясню в главе 10. Указатели полезны, 
 потому что они позволяют программисту решить, является ли значение следует копировать при использовании.

Как они используются?
Базовые типы данных имеют собственные имена, такие как int и float64, и могут использоваться 
с ключевыми словами const и var. Указатели создаются с помощью оператора адреса &.

Есть ли подводные камни или ограничения?
Go не выполняет автоматическое преобразование значений, за исключением особой категории значений, 
известных как нетипизированные константы.

Есть ли альтернативы?
Нет альтернатив основным типам данных, которые используются при альтернативы? разработке Go.

------------------------------------------------------// Понимание основных типов данных \\------------------------------------------------------------------
int
Этот тип представляет целое число, которое может быть положительным или отрицательным. 
Размер типа int зависит от платформы и может быть либо 32, либо 64 бита. Существуют также целые типы, 
которые имеют определенный размер, например int8, int16, int32 и int64, но следует использовать тип int, 
если вам не нужен определенный размер.

uint
Этот тип представляет положительное целое число. Размер типа uint зависит от платформы и может 
составлять 32 или 64 бита. Существуют также целочисленные типы без знака, которые имеют определенный размер, 
например uint8, uint16, uint32 и uint64, но следует использовать тип uint, если вам не нужен определенный размер.

byte
Этот тип является псевдонимом для uint8 и обычно используется для представления байта данных.

float32, float64
Эти типы представляют числа с дробью. Эти типы выделяют 32 или 64 бита для хранения значения.

complex64, complex128
Эти типы представляют числа, которые имеют действительные и мнимые компоненты. Эти типы выделяют 64 или 128 бит для хранения значения.

bool 
Этот тип представляет булеву истину со значениями true и false. 

string
Этот тип представляет собой последовательность символов.

rune
Этот тип представляет одну кодовую точку Unicode. Юникод сложен, но, грубо говоря, это представление одного символа.
 Тип rune является псевдонимом для int32.

------------------------------------------------------// Понимание константы \\------------------------------------------------------------------
Типизированные константы определяются с помощью ключевого слова const, за которым следует имя, тип и присвоенное значение
const prise float32 = 275.00
const - ключевое слово
prise - имя
float32 - тип
275.00 - присвоение значения

Понимание нетипизированных констант
Go имеет строгие правила в отношении типов данных и не выполняет автоматических преобразований типов, 
что может усложнить общие задачи программирования

Функция нетипизированных констант упрощает работу с константами, поскольку компилятор Go 
будет выполнять ограниченное автоматическое преобразование
const quantity = 2

ПОНИМАНИЕ IOTA
Ключевое слово iota можно использовать для создания серии последовательных нетипизированных целочисленных констант 
без необходимости присваивать им отдельные значения

------------------------------------------------------// Пустой идентификатор \\------------------------------------------------------------------

Пустым идентификатором является символ подчеркивания (символ _), и его можно использовать везде, 
где использование имени создаст переменную, которая впоследствии не будет использоваться

------------------------------------------------------// Понимание указателей \\------------------------------------------------------------------
Указатель — это переменная, значением которой является адрес памяти

Указатели определяются с помощью амперсанда (символа &), известного как оператор адреса, за которым следует имя переменной

Фраза, следование указателю, означает чтение значения по адресу памяти, на который указывает указатель,
 и это делается с помощью звездочки (символа *)